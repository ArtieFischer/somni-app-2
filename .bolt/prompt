# Somni Development Guidelines - Universal

## PROJECT ARCHITECTURE

### Monorepo Structure
```
somni-app-2/
├── apps/mobile/           # React Native Expo app
├── packages/              # Shared packages
│   ├── stores/           # Zustand state management
│   ├── theme/            # Oniric design system
│   ├── locales/          # i18n translations
│   └── types/            # TypeScript definitions
├── docs/                 # Project documentation
└── supabase/            # Database migrations
```

### Technology Stack
- **Frontend**: React Native (Expo SDK 53+), TypeScript
- **State Management**: Zustand with persistence
- **Database**: Supabase (PostgreSQL + Real-time + Auth)
- **Navigation**: React Navigation with conditional routing
- **Styling**: Custom oniric theme system
- **Internationalization**: i18next with dreamlike translations

---

## THEME SYSTEM (MANDATORY)

### Core Principles
- **Consistent Theming** - ALL components MUST use theme system
- **Dark-First Design** - Optimized for nighttime usage
- **Accessibility Compliance** - WCAG 2.1 AA standards
- **Minimum Touch Targets** - 48dp minimum for all interactive elements

### Theme Usage (REQUIRED)
```typescript
// All components MUST use theme hook
const theme = useTheme();

// Example theme structure
interface Theme {
  colors: {
    background: { primary: string; elevated: string };
    primary: string;
    accent: string;
    text: { primary: string; secondary: string; muted: string };
  };
  spacing: { xs: number; small: number; medium: number; large: number };
  shadows: { small: object; medium: object };
}
```

### Component Standards (MANDATORY)
```typescript
// Button heights - REQUIRED for accessibility
const BUTTON_HEIGHTS = {
  small: 40,   // Secondary actions
  medium: 48,  // Standard minimum (WCAG)
  large: 56,   // Primary actions
};

// Spacing system - consistent across all components
const spacing = { xs: 4, small: 8, medium: 16, large: 24, xl: 32 };
```

### Translation Requirements
- ALL user-facing text MUST use translations
- Use consistent, branded copy style
- ALWAYS cast translations with String() for React Native compatibility
- Example pattern: `{String(t('navigation.home'))}`

---

## STATE MANAGEMENT PATTERNS

### Zustand Store Organization
```typescript
// Domain-driven store pattern
interface AuthStore {
  // State
  user: User | null;
  profile: UserProfile | null;
  isAuthenticated: boolean;
  isLoading: boolean;

  // Actions
  setUser: (user: User | null) => void;
  setProfile: (profile: UserProfile | null) => void;
  signOut: () => void;
}

// Implementation with persistence
export const useAuthStore = create<AuthStore>()(
  persist(
    (set, get) => ({
      // Store implementation
    }),
    {
      name: 'auth-storage',
      partialize: (state) => ({
        // Only persist essential state
        user: state.user,
        isAuthenticated: state.isAuthenticated,
      }),
    },
  ),
);
```

### Store Usage Pattern
```typescript
// Correct usage - subscribes to updates
const { user, profile, setUser } = useAuthStore();

// AVOID - doesn't subscribe to changes
const store = useAuthStore();
```

---

## COMPONENT ARCHITECTURE

### Atomic Design Structure (MANDATORY)
```
src/components/
├── atoms/              # Basic building blocks
│   ├── Button/        # 48dp height, oniric styling
│   ├── Input/         # Focus states, validation
│   └── Text/          # Typography with theme
├── molecules/         # Component combinations
│   ├── MultiSelectChip/  # Selection interface
│   └── AuthInput/        # Specialized form input
└── organisms/         # Complex components
    └── OnboardingScreenLayout/  # Reusable layouts
```

### Button Component (REQUIRED Implementation)
```typescript
interface ButtonProps {
  variant: 'primary' | 'secondary' | 'ghost';
  size: 'small' | 'medium' | 'large';
  children: React.ReactNode;
  onPress: () => void;
  loading?: boolean;
  disabled?: boolean;
}

export const Button: React.FC<ButtonProps> = ({ variant, size, children, onPress, loading, disabled }) => {
  const theme = useTheme();

  const styles = StyleSheet.create({
    button: {
      height: size === 'small' ? 40 : size === 'large' ? 56 : 48, // REQUIRED heights
      backgroundColor: variant === 'primary' ? theme.colors.primary : 'transparent',
      borderRadius: theme.borderRadius.medium,
      paddingHorizontal: theme.spacing.medium,
      alignItems: 'center',
      justifyContent: 'center',
      ...theme.shadows.small, // Theme-based shadow effects
    },
  });

  return (
    <TouchableOpacity style={styles.button} onPress={onPress} disabled={disabled || loading}>
      <Text variant="button" color={variant === 'primary' ? 'white' : 'primary'}>
        {children}
      </Text>
    </TouchableOpacity>
  );
};
```

### Input Component (REQUIRED Implementation)
```typescript
export const Input: React.FC<InputProps> = ({ label, value, onChangeText, error, ...props }) => {
  const theme = useTheme();
  const [isFocused, setIsFocused] = useState(false);

  const styles = StyleSheet.create({
    input: {
      height: 48, // REQUIRED: Consistent height
      borderWidth: 1,
      borderColor: error ? theme.colors.error : isFocused ? theme.colors.primary : theme.colors.border,
      borderRadius: theme.borderRadius.medium,
      paddingHorizontal: theme.spacing.medium,
      backgroundColor: theme.colors.background.elevated,
      color: theme.colors.text.primary,
      // Theme-based glow effect on focus
      ...(isFocused && {
        shadowColor: theme.colors.primary,
        shadowRadius: 8,
        shadowOpacity: 0.3,
      }),
    },
  });

  return (
    <View>
      {label && <Text variant="label">{label}</Text>}
      <TextInput
        style={styles.input}
        value={value}
        onChangeText={onChangeText}
        onFocus={() => setIsFocused(true)}
        onBlur={() => setIsFocused(false)}
        placeholderTextColor={theme.colors.text.muted}
        {...props}
      />
      {error && <Text variant="caption" color="error">{error}</Text>}
    </View>
  );
};
```

---

## NAVIGATION PATTERNS

### Conditional Navigation (IMPLEMENTED Pattern)
```typescript
export const AppNavigator = () => {
  const { isAuthenticated, profile, isLoading } = useAuthStore();

  if (isLoading) return <LoadingScreen />;
  if (!isAuthenticated) return <AuthNavigator />;
  if (!profile?.onboarding_completed) return <OnboardingNavigator />;
  return <MainNavigator />;
};
```

### Navigation Types (REQUIRED)
```typescript
export type AuthStackParamList = {
  Welcome: undefined;
  SignIn: undefined;
  SignUp: undefined;
};

export type OnboardingStackParamList = {
  Welcome: undefined;
  SleepSchedule: undefined;
  Goals: undefined;
  Lucidity: undefined;
  Privacy: undefined;
  Complete: undefined;
};

// Type-safe navigation usage
type Props = NativeStackScreenProps<OnboardingStackParamList, 'Goals'>;
const OnboardingGoalsScreen: React.FC<Props> = ({ navigation }) => {
  navigation.navigate('Lucidity');
};
```

---

## DATABASE PATTERNS

### Supabase Client Setup (REQUIRED)
```typescript
// apps/mobile/src/infrastructure/auth/supabase.ts
import 'react-native-url-polyfill/auto';
import { createClient } from '@supabase/supabase-js';
import AsyncStorage from '@react-native-async-storage/async-storage';

export const supabase = createClient(
  process.env.EXPO_PUBLIC_SUPABASE_URL!,
  process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY!,
  {
    auth: {
      storage: AsyncStorage,        // REQUIRED for persistence
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: false,
    },
  }
);
```

### Repository Pattern
```typescript
export class UserRepository {
  static async createProfile(userId: string, profileData: Partial<UserProfile>) {
    const { data, error } = await supabase
      .from('users_profile')
      .insert({
        id: userId,
        ...profileData,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      })
      .select()
      .single();

    if (error) throw error;
    return data;
  }

  static async getProfile(userId: string): Promise<UserProfile | null> {
    const { data, error } = await supabase
      .from('users_profile')
      .select('*')
      .eq('id', userId)
      .single();

    if (error && error.code !== 'PGRST116') throw error;
    return data;
  }
}
```

---

## AUDIO & RECORDING PATTERNS

### Audio Service Implementation
```typescript
import { useAudioRecorder, RecordingPresets, AudioModule } from 'expo-audio';

export class AudioService {
  private audioRecorder: ReturnType<typeof useAudioRecorder> | null = null;
  private isRecording = false;

  async requestPermissions(): Promise<boolean> {
    const { status } = await AudioModule.requestRecordingPermissionsAsync();
    return status === 'granted';
  }

  async startRecording(): Promise<void> {
    if (!this.audioRecorder) throw new Error('Not initialized');
    
    const hasPermission = await this.requestPermissions();
    if (!hasPermission) throw new Error('Permission denied');

    await this.audioRecorder.prepareToRecordAsync();
    this.audioRecorder.record();
    this.isRecording = true;
  }

  async stopRecording(): Promise<AudioRecordingResult> {
    if (!this.isRecording || !this.audioRecorder) {
      throw new Error('No recording in progress');
    }

    await this.audioRecorder.stop();
    const uri = this.audioRecorder.uri;
    
    if (!uri) throw new Error('Recording URI not available');

    return {
      uri,
      duration: this.getCurrentDuration(),
      fileSize: await this.getFileSize(uri),
      format: 'wav'
    };
  }
}
```

### Recording Session Management
```typescript
interface RecordingSession {
  id: string;
  status: 'idle' | 'recording' | 'processing' | 'completed' | 'error';
  startTime?: string;
  endTime?: string;
  duration?: number;
  audioUri?: string;
  dreamId?: string;
}

// Store pattern for recording sessions
interface DreamState {
  recordingSession: RecordingSession | null;
  isRecording: boolean;
  
  startRecording: () => void;
  stopRecording: () => void;
  updateRecordingSession: (updates: Partial<RecordingSession>) => void;
  clearRecordingSession: () => void;
}
```

---

## OFFLINE SUPPORT PATTERNS

### Network Status Detection
```typescript
import NetInfo from '@react-native-community/netinfo';

export const useNetworkStatus = () => {
  const [networkStatus, setNetworkStatus] = useState({
    isConnected: false,
    isInternetReachable: false,
    type: 'unknown',
  });

  useEffect(() => {
    const unsubscribe = NetInfo.addEventListener(state => {
      setNetworkStatus({
        isConnected: state.isConnected ?? false,
        isInternetReachable: state.isInternetReachable ?? false,
        type: state.type,
      });
    });

    return () => unsubscribe();
  }, []);

  return networkStatus;
};
```

### Offline Queue Store Pattern
```typescript
interface OfflineRecording {
  id: string;
  sessionId: string;
  audioUri: string;
  duration: number;
  fileSize: number;
  recordedAt: string;
  retryCount: number;
  status: 'pending' | 'uploading' | 'failed' | 'completed';
}

interface OfflineQueueState {
  recordings: OfflineRecording[];
  isProcessing: boolean;
  
  addRecording: (recording: Omit<OfflineRecording, 'id' | 'retryCount' | 'status'>) => void;
  processQueue: () => Promise<void>;
  retryFailedRecordings: () => Promise<void>;
}
```

---

## PERFORMANCE PATTERNS

### Memoization (REQUIRED for expensive components)
```typescript
const DreamListItem = React.memo<{ dream: Dream; onPress: (id: string) => void }>(
  ({ dream, onPress }) => {
    const handlePress = useCallback(() => {
      onPress(dream.id);
    }, [dream.id, onPress]);

    const styles = useMemo(() => ({
      container: {
        backgroundColor: theme.colors.background.elevated,
        padding: theme.spacing.medium,
      },
    }), [theme]);

    return (
      <Pressable style={styles.container} onPress={handlePress}>
        <Text>{dream.rawTranscript}</Text>
      </Pressable>
    );
  }
);
```

### FlatList Optimization
```typescript
<FlatList
  data={dreams}
  renderItem={renderDreamItem}
  keyExtractor={(item) => item.id}
  getItemLayout={getItemLayout}      // If item height is fixed
  removeClippedSubviews={true}       // Performance optimization
  maxToRenderPerBatch={10}
  windowSize={10}
  initialNumToRender={10}
/>
```

---

## ERROR HANDLING PATTERNS

### Supabase Error Handling
```typescript
export const handleSupabaseError = (error: PostgrestError | AuthError): string => {
  // Database constraint violations
  if (error.code === '23505') {
    if (error.message.includes('username')) {
      return 'This username is already taken.';
    }
  }

  // Row Level Security violations
  if (error.code === '42501') {
    return "You don't have permission to perform this action.";
  }

  // Network errors
  if (error.message.includes('network')) {
    return 'Network error. Please check your connection.';
  }

  return 'An unexpected error occurred.';
};
```

### Component Error Boundaries
```typescript
const ComponentWithErrorHandling = () => {
  const [error, setError] = useState<string | null>(null);

  const handleAction = async () => {
    try {
      setError(null);
      await performAction();
    } catch (err) {
      const errorMessage = err instanceof Error 
        ? handleSupabaseError(err) 
        : 'An unexpected error occurred';
      setError(errorMessage);
    }
  };

  if (error) {
    return <ErrorMessage message={error} onDismiss={() => setError(null)} />;
  }

  return <MainContent />;
};
```

---

## TESTING PATTERNS

### Component Testing
```typescript
import { render, fireEvent } from '@testing-library/react-native';

describe('Button', () => {
  it('should call onPress when pressed', () => {
    const onPress = jest.fn();
    const { getByText } = render(
      <Button onPress={onPress}>Test Button</Button>
    );

    fireEvent.press(getByText('Test Button'));
    expect(onPress).toHaveBeenCalledTimes(1);
  });

  it('should be disabled when loading', () => {
    const onPress = jest.fn();
    const { getByText } = render(
      <Button onPress={onPress} loading>Test Button</Button>
    );

    fireEvent.press(getByText('Loading...'));
    expect(onPress).not.toHaveBeenCalled();
  });
});
```

### Store Testing
```typescript
describe('authStore', () => {
  beforeEach(() => {
    useAuthStore.getState().signOut(); // Reset state
  });

  it('should authenticate user', () => {
    const { result } = renderHook(() => useAuthStore());

    act(() => {
      result.current.setUser(mockUser);
    });

    expect(result.current.isAuthenticated).toBe(true);
    expect(result.current.user).toEqual(mockUser);
  });
});
```

---

## CODE QUALITY STANDARDS

### DO's
- ✅ Keep components under 150 lines
- ✅ Use TypeScript strictly (no `any`)
- ✅ Extract complex logic to hooks
- ✅ Use semantic component names
- ✅ Implement proper error boundaries
- ✅ Add JSDoc for complex logic
- ✅ Use React.memo for expensive components
- ✅ Implement loading and error states
- ✅ Use translation keys for ALL user-facing text
- ✅ Format dates/numbers according to locale
- ✅ Follow 48dp minimum button heights
- ✅ Use oniric color palette consistently

### DON'Ts
- ❌ No inline styles (use StyleSheet)
- ❌ No business logic in components
- ❌ No direct API calls in components
- ❌ No hardcoded strings (use i18n)
- ❌ No magic numbers (use theme constants)
- ❌ No `any` types
- ❌ No console.logs in production
- ❌ No unnecessary re-renders
- ❌ No mixing concerns (styling/logic/presentation)
- ❌ Never use light theme colors

---

## ELEVENLABS INTEGRATION PATTERNS

### API Configuration (REQUIRED)
```typescript
// Environment variables
EXPO_PUBLIC_ELEVENLABS_API_KEY=your_elevenlabs_api_key
EXPO_PUBLIC_ELEVENLABS_VOICE_ID=default_voice_id

// Service initialization
export class ElevenLabsService {
  private apiKey: string;
  private baseUrl = 'https://api.elevenlabs.io/v1';
  
  constructor(apiKey: string) {
    this.apiKey = apiKey;
  }

  private getHeaders() {
    return {
      'Accept': 'audio/mpeg',
      'xi-api-key': this.apiKey,
      'Content-Type': 'application/json',
    };
  }
}
```

### Text-to-Speech Implementation
```typescript
interface TTSOptions {
  text: string;
  voiceId: string;
  stability?: number;        // 0-1, default 0.5
  similarityBoost?: number;  // 0-1, default 0.5
  style?: number;           // 0-1, default 0
  useSpeakerBoost?: boolean; // default true
}

export class ElevenLabsService {
  async generateSpeech(options: TTSOptions): Promise<string> {
    const {
      text,
      voiceId,
      stability = 0.5,
      similarityBoost = 0.5,
      style = 0,
      useSpeakerBoost = true
    } = options;

    const response = await fetch(`${this.baseUrl}/text-to-speech/${voiceId}`, {
      method: 'POST',
      headers: this.getHeaders(),
      body: JSON.stringify({
        text,
        model_id: "eleven_monolingual_v1", // or eleven_multilingual_v2
        voice_settings: {
          stability,
          similarity_boost: similarityBoost,
          style,
          use_speaker_boost: useSpeakerBoost
        }
      })
    });

    if (!response.ok) {
      throw new Error(`ElevenLabs API error: ${response.status}`);
    }

    // Convert response to base64 for React Native audio playback
    const arrayBuffer = await response.arrayBuffer();
    const base64 = Buffer.from(arrayBuffer).toString('base64');
    
    // Save to temporary file
    const filename = `speech_${Date.now()}.mp3`;
    const filepath = `${FileSystem.cacheDirectory}${filename}`;
    
    await FileSystem.writeAsStringAsync(filepath, base64, {
      encoding: FileSystem.EncodingType.Base64,
    });

    return filepath;
  }
}
```

### Voice Cloning (Advanced)
```typescript
interface VoiceCloneOptions {
  name: string;
  description?: string;
  files: string[];  // Array of audio file URIs
  labels?: Record<string, string>;
}

export class ElevenLabsService {
  async cloneVoice(options: VoiceCloneOptions): Promise<string> {
    const formData = new FormData();
    
    formData.append('name', options.name);
    if (options.description) {
      formData.append('description', options.description);
    }

    // Add audio files
    for (let i = 0; i < options.files.length; i++) {
      const fileUri = options.files[i];
      formData.append('files', {
        uri: fileUri,
        type: 'audio/mpeg',
        name: `voice_sample_${i}.mp3`
      } as any);
    }

    // Add labels if provided
    if (options.labels) {
      formData.append('labels', JSON.stringify(options.labels));
    }

    const response = await fetch(`${this.baseUrl}/voices/add`, {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'xi-api-key': this.apiKey,
      },
      body: formData
    });

    if (!response.ok) {
      throw new Error(`Voice cloning failed: ${response.status}`);
    }

    const result = await response.json();
    return result.voice_id;
  }
}
```

### Error Handling (MANDATORY)
```typescript
export const handleElevenLabsError = (error: any): string => {
  if (error.status === 401) {
    return 'Invalid ElevenLabs API key';
  }
  
  if (error.status === 422) {
    return 'Invalid request parameters';
  }
  
  if (error.status === 429) {
    return 'Rate limit exceeded. Please try again later.';
  }
  
  if (error.status >= 500) {
    return 'ElevenLabs service temporarily unavailable';
  }
  
  return 'Speech generation failed. Please try again.';
};

// Usage in components
const [isGeneratingSpeech, setIsGeneratingSpeech] = useState(false);
const [speechError, setSpeechError] = useState<string | null>(null);

const generateSpeech = async (text: string) => {
  try {
    setIsGeneratingSpeech(true);
    setSpeechError(null);
    
    const audioPath = await elevenLabsService.generateSpeech({
      text,
      voiceId: DEFAULT_VOICE_ID
    });
    
    // Play audio using expo-av or similar
    await playAudio(audioPath);
    
  } catch (error) {
    setSpeechError(handleElevenLabsError(error));
  } finally {
    setIsGeneratingSpeech(false);
  }
};
```

### Audio Playback Integration
```typescript
import { Audio } from 'expo-av';

export class AudioPlaybackService {
  private sound: Audio.Sound | null = null;

  async playGeneratedSpeech(audioPath: string): Promise<void> {
    try {
      // Stop any currently playing audio
      if (this.sound) {
        await this.sound.unloadAsync();
      }

      // Load and play new audio
      const { sound } = await Audio.Sound.createAsync(
        { uri: audioPath },
        { shouldPlay: true }
      );
      
      this.sound = sound;

      // Set up completion handler
      sound.setOnPlaybackStatusUpdate((status) => {
        if (status.isLoaded && status.didJustFinish) {
          this.cleanup();
        }
      });

    } catch (error) {
      console.error('Audio playback failed:', error);
      throw new Error('Failed to play generated speech');
    }
  }

  async cleanup(): Promise<void> {
    if (this.sound) {
      await this.sound.unloadAsync();
      this.sound = null;
    }
  }
}
```

### Best Practices (MANDATORY)
- **Rate Limiting**: Implement client-side rate limiting (max 20 requests/minute)
- **Caching**: Cache generated audio files to avoid redundant API calls
- **Error Recovery**: Always implement retry logic with exponential backoff
- **Audio Cleanup**: Always cleanup audio resources to prevent memory leaks
- **User Feedback**: Show clear loading states during speech generation
- **Offline Handling**: Queue speech generation requests when offline
- **Voice Selection**: Allow users to choose from available voices
- **Text Limits**: Respect ElevenLabs character limits (5000 chars for standard)

---

## IMPORT PATTERNS

### Import Organization (REQUIRED)
```typescript
// 1. React and external libraries
import React from 'react';
import { View, StyleSheet } from 'react-native';
import { useForm } from 'react-hook-form';

// 2. Internal packages (absolute imports)
import { useAuthStore } from '@somni/stores';
import type { UserProfile } from '@somni/types';

// 3. Local imports (relative paths)
import { Text, Button } from '../../components/atoms';
import { useTheme } from '../../hooks/useTheme';
import { useStyles } from './Component.styles';
```

### Path Conventions
- **Relative imports** for local files: `../../../hooks/useTheme`
- **Absolute imports** for packages: `@somni/stores`
- **Consistent organization** across all components

---

## ENVIRONMENT SETUP

### Required Environment Variables
```env
# Mobile App (.env)
EXPO_PUBLIC_SUPABASE_URL=your_supabase_project_url
EXPO_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key
```

### Package Scripts
```json
{
  "scripts": {
    "dev": "npx expo start",
    "ios": "npx expo run:ios",
    "android": "npx expo run:android",
    "lint": "eslint src --ext .ts,.tsx",
    "type-check": "tsc --noEmit"
  }
}
```

This guide serves as the definitive reference for Somni development. All new implementations should follow these patterns and standards.